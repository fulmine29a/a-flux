import React, {ReactNode, useState} from 'react';
import {counterContext} from './counterContext';
import {createCounterStore} from "./store";

/*
* обертка для хранения контекста,
* лежит не в "библиотеке" т.к. решение как передавать стор должно быть в "пользовательском коде"
*
* при запуске в режиме разработки (и только в нём) замечено что стор будет создан дважды и использоваться будет последний
* созданный причина тут в том как реакт инициализирует компоненты в режиме разработке. если конкретно то вызов useReducer,
* который и имплиментирует useState, вызывает функцию-иниациализер стейта при каждом вызове до завершения
* первого рендера что по факту в режиме разработке произойдёт несколько раз. useMemo по документации не гарантирует
* что данные не будут освобождены из памяти и его мы тут использовать не можем.
*
* при использовании классового компонента всё будет по сути так же (реакт создаст его два раза).
* это можно было бы решить вынеся хранение стора из компонента, но если мы делаем универсальный набор компонентов
* который будет использоваться в нескольких местах с разным стором... это не подходит.
*
* проблема не решена т.к. при разработке зомби-стор не мешает, при сборке в режиме прода всё идёт нормально и создаётся
* один стор как и нужно
* */
export function CounterProvider({children}: { children: ReactNode }) {
  const [contextData] = useState(() => ({store: createCounterStore()}));

  return <counterContext.Provider value={contextData}>
    {children}
  </counterContext.Provider>
}
